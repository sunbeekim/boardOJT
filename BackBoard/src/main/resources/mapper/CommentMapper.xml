<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.board.domain.comment.dao.CommentMapper">

    <!-- 결과 매핑 -->
    <resultMap id="commentMap" type="com.example.board.domain.comment.entity.Comment">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 댓글 등록 -->
    <insert id="insert" parameterType="com.example.board.domain.comment.entity.Comment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comments (post_id, user_id, content, created_at, updated_at)
        VALUES (#{postId}, #{userId}, #{content}, NOW(), NOW())
    </insert>

    <!-- 특정 댓글 조회-->
    <select id="findById" resultMap="commentMap" parameterType="long">
        SELECT * 
        FROM comments
        WHERE id = #{id}
    </select>

    <!-- 특정 댓글 유저 조회-->
    <select id="findByUserId" resultMap="commentMap" parameterType="long">
        SELECT * 
        FROM comments
        WHERE user_id = #{userId}
    </select>

    <!-- 특정 게시글의 댓글 목록 조회 -->
    <select id="findByPostId" resultType="CommentResponseDto" parameterType="long">
        SELECT c.*, u.nickname
        FROM comments c
        JOIN users u ON c.user_id = u.id
        WHERE c.post_id = #{postId}
        ORDER BY c.created_at ASC
    </select>

    <!-- 댓글 수정 -->
    <update id="update" parameterType="com.example.board.domain.comment.entity.Comment">
        UPDATE comments
        SET content = #{content},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM comments WHERE id = #{id}
    </delete>

</mapper>
